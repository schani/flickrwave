<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Flickr Test" height="120">
  <Require feature="wave" />
  <Require feature="dynamic-height" />
</ModulePrefs>
<Content type="html">
<![CDATA[
    <!-- <div id="debug">not inited</div> -->
    <div id="content_div"></div>
    <div id="form">
      User ID: <input type=text value="28311604@N00" id="user_id">
	<input type=button value="Go!" id="butCount" onClick="fetch()">
    </div>
    <script type="text/javascript">

    var api_key = "07b09f24ad41a2c8020a53fea673a618";
    //var debug_text = document.getElementById('debug');
    var content = document.getElementById('content_div');
    var user_id_input = document.getElementById('user_id');

    var have_content = false;

    var per_page = 3;

    function debugPrint (txt) {
      //debug_text.innerHTML = txt;
    }

    function callFlickr (method, args) {
      var url = "http://api.flickr.com/services/rest/?method=" + method + "&api_key=" + encodeURIComponent(api_key) + "&format=json";
      if (args)
        url += "&" + args;
      var script = document.createElement("script");
      script.setAttribute("src",url);
      script.setAttribute("type","text/javascript");
      document.body.appendChild(script);
    }

    function fetch () {
      wave.getState ().submitDelta ({'user_id': user_id_input.value});
    }

    function createContent () {
      dict = new Object ();
      dict.anchors = new Array ();
      dict.images = new Array ();

      var paragraph;
      if (!have_content) {
        paragraph = document.createElement ("div");
        content.appendChild (paragraph);
      }

      var i;
      for (i = 0; i < per_page; ++i) {
	var anchor_id = "a_" + i;
	var img_id = "img_" + i;

	if (have_content) {
	  dict.anchors [i] = document.getElementById (anchor_id);
	  dict.images [i] = document.getElementById (img_id);
	} else {
          var anchor = document.createElement ("a");
	  anchor.id = anchor_id;
          anchor.target = "_flickr";
	  var img = document.createElement ("img");
	  img.onload = function () { gadgets.window.adjustHeight (); }
	  img.id = img_id;
          img.hspace = "3";
          img.vspace = "3";
	  anchor.appendChild (img);
	  paragraph.appendChild (anchor);

	  dict.anchors [i] = anchor;
	  dict.images [i] = img;
	}
      }

      if (!have_content) {
        paragraph = document.createElement ("div");
        var button = document.createElement ("input");
        button.type = "button";
        button.value = "<<";
        button.onclick = function () { advance(-1); };
        paragraph.appendChild (button);
        button = document.createElement ("input");
        button.type = "button";
        button.value = ">>";
        button.onclick = function () { advance(1); };
        paragraph.appendChild (button);
        content.appendChild (paragraph);

        // FIXME: we should probably not do this because we can't go
        // back in time to when we didn't have a user_id
        var form = document.getElementById ("form");
        form.parentNode.removeChild (form);
      }

      gadgets.window.adjustHeight ();

      have_content = true;

      return dict;
    }

    function jsonFlickrApi (rsp) {
      if (rsp.stat != "ok") {
        document.write("Error");
        debugPrint ("Error!");
	return;
      }
      debugPrint ("OK");

      var content_dict = createContent ();

      var index;
      for (index in rsp.photos.photo) {
        var photo = rsp.photos.photo [index];
        var photo_url = "http://farm" + photo.farm + ".static.flickr.com/" + photo.server + "/" + photo.id + "_" + photo.secret + "_" + "m.jpg";

	var anchor = content_dict.anchors [index];
	var img = content_dict.images [index];

        img.src = photo_url;
        anchor.href = "http://www.flickr.com/photos/" + photo.owner + "/" + photo.id + "/";
      }

      debugPrint ("Done 22");
    }

    function advance (delta) {
      debugPrint ("Advancing " + delta);
      var page = wave.getState ().get ("page");
      if (!page)
        page = 1;
      else
        page = parseInt (page);
      page += delta;
      if (page < 1)
        page = 1;
      wave.getState ().submitDelta ({'page': page});
    }

    function stateUpdated () {
      if (wave.getState ().get ('user_id')) {
        var user_id = wave.getState ().get ('user_id');
	var page = wave.getState ().get ('page');
	if (page)
	  page = parseInt (page);
	else
	  page = "1";
        debugPrint ("Fetching " + user_id + " page " + page);
        callFlickr ("flickr.people.getPublicPhotos", "user_id=" + encodeURIComponent (user_id) + "&per_page=" + per_page + "&page=" + page);
	callFlickr ("flickr.people.getInfo", "user_id=" + encodeURIComponent (user_id));
      }
    }

    function init() {
      if (wave && wave.isInWaveContainer()) {
        wave.setStateCallback(stateUpdated);
      }
    }
    gadgets.util.registerOnLoadHandler(init);
  ]]>
  </Content>
</Module>
