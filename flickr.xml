<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="FlickrWave" height="120">
  <Require feature="wave" />
  <Require feature="dynamic-height" />
</ModulePrefs>
<Content type="html">
<![CDATA[
    <!-- <div id="debug">not inited</div> -->
    <div id="content_div"></div>
    <div id="form">
      URL: <input type=text value="http://www.flickr.com/photos/schani/" id="url" size="50">
        <input type=button value="Go!" onClick="fetchFromURL()"><br>
      Number of photos: <input type=text value="3" id="per_page">
    </div>
    <script type="text/javascript">

    var api_key = "07b09f24ad41a2c8020a53fea673a618";
    //var debug_text = document.getElementById('debug');
    var content = document.getElementById ('content_div');
    var url_input = document.getElementById ('url');
    var per_page_input = document.getElementById ('per_page');

    var handler = null;

    function debugPrint (txt) {
      //debug_text.innerHTML = txt;
    }

    function callFlickr (method, args) {
      var url = "http://api.flickr.com/services/rest/?method=" + method + "&api_key=" + encodeURIComponent(api_key) + "&format=json";
      if (args)
        url += "&" + args;
      var script = document.createElement("script");
      script.setAttribute("src",url);
      script.setAttribute("type","text/javascript");
      document.body.appendChild(script);
    }

    function getPerPageFromInput () {
      var per_page = parseInt (per_page_input.value);
      if (per_page < 1)
	per_page = 3;
      return per_page;
    }

    function fetchFromURL () {
      var url = url_input.value;
      handler = new UserHandler ();
      handler.setSourceURL (url);
    }

    function getWaveStateIntFunc (name, def) {
      return function () {
	var val = wave.getState ().get (name);
	if (!val)
	  return def;
	return parseInt (val);
      }
    }

    var getPage = getWaveStateIntFunc ("page", 1);
    var getPerPage = getWaveStateIntFunc ("per_page", 3);

    function getUserId () {
      var user_id = wave.getState ().get ('userId');
      if (user_id)
	return user_id;
      user_id = wave.getState ().get ('user_id');
      return user_id;
    }

    function StreamHandler () {
      this.num_photos = 0;
      this.content_dict = null;
      this.have_stream_info = false;
    }

    StreamHandler.prototype.stateUpdated = function () {
      var page = getPage ();
      var per_page = getPerPage ();

      this.fetchPage (page, per_page);

      if (!this.have_stream_info)
	this.fetchStreamInfo ();
    }

    StreamHandler.prototype.createContent = function () {
      if (this.content_dict)
	return;

      this.content_dict = new Object ();
      this.content_dict.anchors = new Array ();
      this.content_dict.images = new Array ();

      var paragraph = document.createElement ("div");
      content.appendChild (paragraph);

      var buddy_anchor = document.createElement ("a");
      buddy_anchor.target = "_flickr";
      this.content_dict.icon_anchor = buddy_anchor;

      var buddy_img = document.createElement ("img");
      buddy_img.onload = function () { gadgets.window.adjustHeight (); }
      buddy_img.hspace = 3;
      buddy_img.vspace = 3;
      buddy_img.align = "middle";
      this.content_dict.icon_image = buddy_img;

      buddy_anchor.appendChild (buddy_img);
      paragraph.appendChild (buddy_anchor);

      var buddy_name = document.createElement ("font");
      buddy_name.size = "+2";
      paragraph.appendChild (buddy_name);
      this.content_dict.stream_name = buddy_name;

      paragraph = document.createElement ("div");
      content.appendChild (paragraph);

      var i;
      for (i = 0; i < getPerPage (); ++i) {
        var anchor = document.createElement ("a");
        anchor.target = "_flickr";
	var img = document.createElement ("img");
	img.onload = function () { gadgets.window.adjustHeight (); }
        img.hspace = "3";
        img.vspace = "3";
        img.align = "middle";
	anchor.appendChild (img);
	paragraph.appendChild (anchor);

	this.content_dict.anchors [i] = anchor;
	this.content_dict.images [i] = img;
      }

      paragraph = document.createElement ("div");

      var counter = document.createElement ("font");
      counter.size = "-2";
      paragraph.appendChild (counter);
      this.content_dict.counter = counter;

      var button = document.createElement ("input");
      var this_handler = this;
      button.type = "button";
      button.value = "<<";
      button.onclick = function () { this_handler.advance (-1); };
      paragraph.appendChild (button);
      button = document.createElement ("input");
      button.type = "button";
      button.value = ">>";
      button.onclick = function () { this_handler.advance (1); };
      paragraph.appendChild (button);
      button = document.createElement ("input");
      button.type = "button";
      button.value = "Random";
      button.onclick = function () { this_handler.jumpToRandom (); };
      paragraph.appendChild (button);
      content.appendChild (paragraph);

      var form = document.getElementById ("form");
      form.parentNode.removeChild (form);

      gadgets.window.adjustHeight ();
    }

    StreamHandler.prototype.updateStatus = function () {
      if (!this.have_stream_info)
	return;

      this.createContent ();

      var page = getPage ();
      var per_page = getPerPage ();
      var first = (page - 1) * per_page + 1;
      this.content_dict.counter.innerHTML = "" + first + "-" + (first+per_page-1) + " of " + this.num_photos + " photos ";
    }

    StreamHandler.prototype.populateFromPhotos = function (photos) {
      var index;
      for (index in photos.photo) {
        var photo = photos.photo [index];
        var photo_url = "http://farm" + photo.farm + ".static.flickr.com/" + photo.server + "/" + photo.id + "_" + photo.secret + "_" + "m.jpg";

    	var anchor = this.content_dict.anchors [index];
    	var img = this.content_dict.images [index];

        img.src = photo_url;
        anchor.href = "http://www.flickr.com/photos/" + photo.owner + "/" + photo.id + "/";
	// FIXME: also put title into alt
      }
    }

    StreamHandler.prototype.advance = function (delta) {
      debugPrint ("Advancing " + delta);
      var page = getPage ();
      page += delta;
      if (page < 1)
        page = 1;
      wave.getState ().submitDelta ({'page': page});
    }

    StreamHandler.prototype.jumpToRandom = function () {
      debugPrint ("random");
      var num_pages = Math.ceil (this.num_photos / getPerPage ());
      var random_page = Math.floor (num_pages * Math.random ());
      wave.getState ().submitDelta ({'page': random_page});
    }

    function UserHandler () {
      StreamHandler.call (this);
    }

    UserHandler.prototype = new StreamHandler ();

    UserHandler.prototype.setSourceURL = function (url) {
      debugPrint ("fetching URL " + url);
      callFlickr ("flickr.urls.lookupUser", "url=" + encodeURIComponent (url));
    }

    UserHandler.prototype.fetchStreamInfo = function () {
      var user_id = getUserId ();
      debugPrint ("fetching user info " + user_id);
      callFlickr ("flickr.people.getInfo", "user_id=" + encodeURIComponent (user_id));
    }

    UserHandler.prototype.fetchPage = function (page, per_page) {
      var user_id = getUserId ();
      debugPrint ("Fetching " + user_id + " page " + page);
      callFlickr ("flickr.people.getPublicPhotos", "user_id=" + encodeURIComponent (user_id) + "&per_page=" + per_page + "&page=" + page);
    }

    UserHandler.prototype.jsonFlickrApi = function (rsp) {
      if (rsp.user) {
	var nsid;
	if (rsp.user.nsid)
	  nsid = rsp.user.nsid;
	else
	  nsid = rsp.user.id;
        wave.getState ().submitDelta ({'userId': nsid, 'per_page': getPerPageFromInput ()});
        return;
      }

      this.createContent ();

      if (rsp.photos) {
	this.populateFromPhotos (rsp.photos);
      } else if (rsp.person) {
	this.content_dict.icon_anchor.href = "http://www.flickr.com/photos/" + rsp.person.nsid + "/";

	var icon_server = parseInt (rsp.person.iconserver);
	var icon_url;
	if (icon_server > 0)
          icon_url = "http://farm" + rsp.person.iconfarm + ".static.flickr.com/" + icon_server + "/buddyicons/" + rsp.person.nsid + ".jpg";
	else
	  icon_url = "http://www.flickr.com/images/buddyicon.jpg";
	this.content_dict.icon_image.src = icon_url;

        var name;
        if (rsp.person.realname && rsp.person.realname._content)
          name = rsp.person.realname._content;
        else
          name = rsp.person.username._content;
        this.content_dict.stream_name.innerHTML = " " + name;

	this.num_photos = rsp.person.photos.count._content;
	this.have_stream_info = true;
      }

      this.updateStatus ();
    }

    function jsonFlickrApi (rsp) {
      if (rsp.stat != "ok") {
	// FIXME: Give an error message - probably let the handler
	// provide it
        document.write("Error");
        debugPrint ("Error!");
	return;
      }
      debugPrint ("OK");
      handler.jsonFlickrApi (rsp);
      debugPrint ("Handler done");
    }

    function stateUpdated () {
      if (!handler) {
	var user_id = getUserId ();
	if (user_id) {
	  handler = new UserHandler ();
	}
      }
      if (handler) {
	handler.stateUpdated ();
      }
    }

    function init() {
      if (wave && wave.isInWaveContainer()) {
        wave.setStateCallback(stateUpdated);
      }
    }
    gadgets.util.registerOnLoadHandler(init);
  ]]>
  </Content>
</Module>
