<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="FlickrWave" height="120">
  <Require feature="wave" />
  <Require feature="dynamic-height" />
</ModulePrefs>
<Content type="html">
<![CDATA[
    <!-- <div id="debug">not inited</div> -->
    <div id="content_div"></div>
    <div id="form">
      URL: <input type=text value="http://www.flickr.com/photos/schani/" id="url">
        <input type=button value="Go!" onClick="fetchFromURL()"><br>
      Number of photos: <input type=text value="3" id="per_page">
    </div>
    <script type="text/javascript">

    var api_key = "07b09f24ad41a2c8020a53fea673a618";
    //var debug_text = document.getElementById('debug');
    var content = document.getElementById ('content_div');
    var url_input = document.getElementById ('url');
    var per_page_input = document.getElementById ('per_page');

    var have_content = false;
    var num_photos = 0;

    function debugPrint (txt) {
      //debug_text.innerHTML = txt;
    }

    function callFlickr (method, args) {
      var url = "http://api.flickr.com/services/rest/?method=" + method + "&api_key=" + encodeURIComponent(api_key) + "&format=json";
      if (args)
        url += "&" + args;
      var script = document.createElement("script");
      script.setAttribute("src",url);
      script.setAttribute("type","text/javascript");
      document.body.appendChild(script);
    }

    function getPerPageFromInput () {
      var per_page = parseInt (per_page_input.value);
      if (per_page < 1)
	per_page = 3;
      return per_page;
    }

    function fetchFromURL () {
      var url = url_input.value;
      debugPrint ("fetching URL " + url);
      callFlickr ("flickr.urls.lookupUser", "url=" + encodeURIComponent (url));
    }

    function getPage () {
      var page = wave.getState ().get ("page");
      if (!page)
        page = 1;
      else
        page = parseInt (page);
      return page;
    }

    function getPerPage () {
      var per_page = wave.getState ().get ("per_page");
      if (!per_page)
        per_page = 3;
      else
        per_page = parseInt (per_page);
      return per_page;
    }

    function createContent () {
      dict = new Object ();
      dict.anchors = new Array ();
      dict.images = new Array ();

      var paragraph;
      if (have_content) {
        dict.buddy_anchor = document.getElementById ("buddy_anchor");
        dict.buddy_image = document.getElementById ("buddy");
        dict.buddy_name = document.getElementById ("buddy_name");
      } else {
        paragraph = document.createElement ("div");
	content.appendChild (paragraph);

        var buddy_anchor = document.createElement ("a");
        buddy_anchor.id = "buddy_anchor";
        buddy_anchor.target = "_flickr";
        dict.buddy_anchor = buddy_anchor;

	var buddy_img = document.createElement ("img");
	buddy_img.onload = function () { gadgets.window.adjustHeight (); }
	buddy_img.id = "buddy";
	buddy_img.hspace = 3;
	buddy_img.vspace = 3;
        buddy_img.align = "middle";
        dict.buddy_image = buddy_img;

        buddy_anchor.appendChild (buddy_img);
	paragraph.appendChild (buddy_anchor);

        var buddy_name = document.createElement ("font");
        buddy_name.id = "buddy_name";
        buddy_name.size = "+2";
        paragraph.appendChild (buddy_name);
        dict.buddy_name = buddy_name;

        paragraph = document.createElement ("div");
        content.appendChild (paragraph);
      }

      var i;
      for (i = 0; i < getPerPage (); ++i) {
	var anchor_id = "a_" + i;
	var img_id = "img_" + i;

	if (have_content) {
	  dict.anchors [i] = document.getElementById (anchor_id);
	  dict.images [i] = document.getElementById (img_id);
	} else {
          var anchor = document.createElement ("a");
	  anchor.id = anchor_id;
          anchor.target = "_flickr";
	  var img = document.createElement ("img");
	  img.onload = function () { gadgets.window.adjustHeight (); }
	  img.id = img_id;
          img.hspace = "3";
          img.vspace = "3";
          img.align = "middle";
	  anchor.appendChild (img);
	  paragraph.appendChild (anchor);

	  dict.anchors [i] = anchor;
	  dict.images [i] = img;
	}
      }

      if (have_content) {
        dict.counter = document.getElementById ("counter");
      } else {
        paragraph = document.createElement ("div");

        var counter = document.createElement ("font");
	counter.id = "counter";
	counter.size = "-2";
        paragraph.appendChild (counter);
	dict.counter = counter;

        var button = document.createElement ("input");
        button.type = "button";
        button.value = "<<";
        button.onclick = function () { advance(-1); };
        paragraph.appendChild (button);
        button = document.createElement ("input");
        button.type = "button";
        button.value = ">>";
        button.onclick = function () { advance(1); };
        paragraph.appendChild (button);
        button = document.createElement ("input");
        button.type = "button";
        button.value = "Random";
        button.onclick = function () { jumpToRandom (); };
        paragraph.appendChild (button);
        content.appendChild (paragraph);

        // FIXME: we should probably not do this because we can't go
        // back in time to when we didn't have a user_id
        var form = document.getElementById ("form");
        form.parentNode.removeChild (form);
      }

      gadgets.window.adjustHeight ();

      have_content = true;

      return dict;
    }

    function jsonFlickrApi (rsp) {
      if (rsp.stat != "ok") {
        document.write("Error");
        debugPrint ("Error!");
	return;
      }
      debugPrint ("OK");

      if (rsp.user) {
	var nsid;
	if (rsp.user.nsid)
	  nsid = rsp.user.nsid;
	else
	  nsid = rsp.user.id;
        wave.getState ().submitDelta ({'userId': nsid, 'per_page': getPerPageFromInput ()});
        return;
      }

      var content_dict = createContent ();

      if (rsp.photos) {
        var index;
        for (index in rsp.photos.photo) {
          var photo = rsp.photos.photo [index];
          var photo_url = "http://farm" + photo.farm + ".static.flickr.com/" + photo.server + "/" + photo.id + "_" + photo.secret + "_" + "m.jpg";

    	var anchor = content_dict.anchors [index];
    	var img = content_dict.images [index];

          img.src = photo_url;
          anchor.href = "http://www.flickr.com/photos/" + photo.owner + "/" + photo.id + "/";
        }
      } else if (rsp.person) {
	content_dict.buddy_anchor.href = "http://www.flickr.com/photos/" + rsp.person.nsid + "/";
        content_dict.buddy_image.src = "http://farm" + rsp.person.iconfarm + ".static.flickr.com/" + rsp.person.iconserver + "/buddyicons/" + rsp.person.nsid + ".jpg";

        var name;
        if (rsp.person.realname)
          name = rsp.person.realname._content;
        else
          name = rsp.person.username._content;
        content_dict.buddy_name.innerHTML = " " + name;

        var page = getPage ();
	var per_page = getPerPage();
        var first = (page - 1) * per_page + 1;
	content_dict.counter.innerHTML = "" + first + "-" + (first+per_page-1) + " of " + rsp.person.photos.count._content + " photos ";

	num_photos = rsp.person.photos.count._content;
      }

      debugPrint ("Done 22");
    }

    function advance (delta) {
      debugPrint ("Advancing " + delta);
      var page = getPage ();
      page += delta;
      if (page < 1)
        page = 1;
      wave.getState ().submitDelta ({'page': page});
    }

    function jumpToRandom () {
      var num_pages = Math.ceil (num_photos / getPerPage ());
      var random_page = Math.floor (num_pages * Math.random ());
      wave.getState ().submitDelta ({'page': random_page});
    }

    function getUserId () {
      var user_id = wave.getState ().get ('userId');
      if (user_id)
	return user_id;
      user_id = wave.getState ().get ('user_id');
      return user_id;
    }

    function stateUpdated () {
      var user_id = getUserId ();
      if (user_id) {
        var user_id = getUserId ();
        var page = getPage ();
	var per_page = getPerPage ();
        debugPrint ("Fetching " + user_id + " page " + page);
        callFlickr ("flickr.people.getPublicPhotos", "user_id=" + encodeURIComponent (user_id) + "&per_page=" + per_page + "&page=" + page);
	callFlickr ("flickr.people.getInfo", "user_id=" + encodeURIComponent (user_id));
      }
    }

    function init() {
      if (wave && wave.isInWaveContainer()) {
        wave.setStateCallback(stateUpdated);
      }
    }
    gadgets.util.registerOnLoadHandler(init);
  ]]>
  </Content>
</Module>
